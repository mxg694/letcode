package 基本知识;

public class 算法的时间复杂度 {

    public static void main(String[] args) {
        int n = 1000;
        //--------------1-----------------
        /**
         * 本次for 循环的 时间复杂度 O(n)
         */
        for (int i = 0; i<= n ; i++) {

        }

        //--------------2-----------------
        /**
         * 本次 循环的 时间复杂度 O(n*n)
         */
        for (int i = 0; i<= n ; i++) {
            for (int  j=0 ; j< n ; j++ ){

            }
        }
        //-----------------------------------------
        //几个常见的时间复杂度
        //---------------1、 O(1)--------------
         int  temp ,i =0 ,j=0;
         temp = i;
         i = j;
         j = temp ;

         //----2（1）、O(n2)------------------
            int sum=0;              //   （一次）
            for(i=1;i<=n;i++)     // （n+1次）
            for(j=1;j<=n;j++) // （n2次）
            sum++;            // （n2次）

         //------2(2)、O(n2)-------------
            int x = 0;
            int y = 0;
            for (i=1;i<n;i++) {
                   y =y+1;       // ①
                for (j=0;j<=(2*n);j++)
                   x++;      //  ②
            }
         /*
         *  语句1的频度是n-1
            语句2的频度是(n-1)*(2n+1)=2n2-n-1
            f(n)=2n2-n-1+(n-1)=2n2-2；
            又Θ(2n2-2)=n2
            该程序的时间复杂度T(n)=O(n2).

         *一般情况
    　　 算法的时间复杂度是由嵌套层数最多的循环语句中最内层语句的频度f(n)决定的。
         *
         * */

         //---------3 O(n)-----------------
          int a = 1;
          int b = 1;                  //    ①
          int s = 0;
         for (i=1;i<=n;i++){ // ②
             s=a+b;//　　③
             b=a;//　　④
             a=s;//　　⑤
         }
        /**
         *  语句1的频度：2,
            语句2的频度： n,
            语句3的频度： n-1,
            语句4的频度：n-1,
            语句5的频度：n-1,
            T(n)=2+n+3(n-1)=4n-1=O(n)
         */
         //----------4、O(log2n)  log以2为底， n的对数-  不太理解----------------------

         i=1;   //  ①
         while (i<=n) {
             i = i * 2;// ②
         }
         /**
          *  语句1的频度是1,
           设语句2的频度是f(n),   则：2^f(n)<=n;f(n)<=log2n
           取最大值f(n)=log2n,
           T(n)=O(log2n )
         */

         //----------5、O(n3) ---------------------
         for(i=0;i<n;i++){
             for(j=0;j<i;j++) {
                 for(int k=0;k<j;k++)
                     x=x+2;
             }
         }
    }
}
